class Alien : DukeMonster
{
    int oldLeap;
    
    override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        
        oldLeap = false;
    }

    void A_Leap()
    {
        // if grounded, go to see.
        if (CheckOnGround())
        {
            if (!oldLeap)
            {
                A_FaceTarget();
                double vertical = 12;
                if (target.pos.z-pos.z > 64 && ceilingz-pos.z > 128) vertical = 18;
                vector3 newdir = (cos(angle)*12, sin(angle)*12, vertical);
                vel += newdir;
                oldLeap = frame;
            }
            else
            {
                SetState(ResolveState("See"));
                return;
            }
        }
        else if (vel.z > 0)
        {
            vector3 newdir = (cos(angle)*2, sin(angle)*2, 0);
            vel += newdir;
            frame = oldLeap+1;
        }
        else if (vel.z < 0)
        {
            frame = oldLeap+2;
        }
    }
    
    double GetJumpDistance()
    {
        double dst = 480;
        if (ceilingz-pos.z > 128) dst *= 2;
        return dst;
    }

    bool CheckPitBeforeTarget()
    {
        if (!CheckSight(target)) return false;
        
        int step = int(radius/2);
        vector3 checkdirection = (target.pos-pos).Unit()*step;
        int steps = min(Distance2D(target), GetJumpDistance())/step;
        double curz = pos.z;
        SetXYZ((pos.x, pos.y, pos.z+64));
        for (int i = 0; i < steps; i++)
        {
            double zat = GetZAt(pos.x+checkdirection.x*i, pos.y+checkdirection.y*i, 0, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG);
            //A_LogFloat(zat);
            if (curz-zat > MaxStepHeight*2 || zat-curz > MaxStepHeight)
            {
                SetXYZ((pos.x, pos.y, curz));
                return true;
            }
        }
        
        SetXYZ((pos.x, pos.y, curz));
        return false;
    }
    
    void A_MyChase()
    {
        // check jump
        // if target is above or below the alien, and it's in some distance away, perform a leap.
        // but not always.
        if (!target) return;
        //
        if (CheckOnGround() && // if we are standing
            !random(0, 16) && // and we don't do this all the time
            ((abs(target.pos.z-pos.z) > Default.MaxStepHeight) || // and target has more height difference than maxstepheight
             CheckPitBeforeTarget()) && // and there's a deep pit in front of us
            Distance2D(target) < GetJumpDistance()) // and target is within max jump radius
        {
            oldLeap = 0;
            SetState(ResolveState("Leap"));
            return;
        }
        
        
        // do normal chase.
        if (!random(0, 4) && !target.FindInventory("Shrunk"))
            A_Chase("Melee", "Missile");
        else A_Chase("Melee", null);
    }

    Default
    {
        Monster;
        Radius 24;
        Height 64;
        Health 300;
        Mass 200;
        PainChance 64;
        Speed 8;
        BloodColor "00 ff 00";
        
        Scale 0.65;
        
        Obituary "%o got scratched by an unknown beast.";
        
        MinMissileChance 255;
        
        DamageFactor 'ShrinkRay', 0;
        
        SeeSound "alien/see";
        PainSound "alien/pain";
        DeathSound "alien/death";
        ActiveSound "alien/roam";
    }

    States
    {
    Spawn:
        ALIE A 8 A_Look;
        loop;
        
    See:
        ALIE BBBBCCCCDDDDEEEE 1 A_MyChase;
        loop;
        
    Melee:
        ALIE EF 4 A_FaceTarget;
        ALIE G 8 A_CustomMeleeAttack(random(22, 40), "alien/melee", "alien/miss");
        ALIE H 2;
        goto See;
        
    Missile:
        ALIE I 4 { A_FaceTarget(); A_PlaySound("alien/missile", CHAN_AUTO); }
        ALIE J 8 BRIGHT A_FaceTarget;
        ALIE J 4 BRIGHT { A_FaceTarget(); A_SpawnProjectile("ShrinkRay"); }
        ALIE I 2;
        goto See;
    
    Pain:
        ALIE L 8 A_Pain;
        goto See;
        
    Death:
        TNT1 A 0 A_Scream;
        ALIE LMNOPQR 3;
        ALIE S 3 A_NoBlocking;
        ALIE T -1 A_SetFloorClip;
        stop;
        
    XDeath:
        TNT1 A 0 A_ThrowGibs;
        stop;
        
    Leap:
        ALIE U 1 A_Leap;
        loop;
    }
}
