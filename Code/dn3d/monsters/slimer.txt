// this actor is slimer's face hugging attack for the players.
class SlimerAttackHelper : CustomInventory
{
	int startBiting;

	action void A_StartBite()
	{
		invoker.startBiting = 0;
	}

	action void A_SlimerPlayerBite()
	{
		if (invoker.startBiting < 64) invoker.startBiting+=2;
		A_OverlayOffset(0xF00, 0, 96-invoker.startBiting, 0);
	}

	States
	{
	Pickup:
		TNT1 A 0 { A_Overlay(0xF00, 'PlayerOverlay'); }
		stop;
		
	Use:
		TNT1 A 1;
		fail;
		
	PlayerOverlay:
		TNT1 A 0 A_StartBite();
	LoopPlayerOverlay:
		SLIE AAAAAAAABBBBBBBBCCCCCCCC 1 A_SlimerPlayerBite();
		loop;
	}
}

// this actor is slimer's hitbox. this is needed because slimer should be shootable and at the same time passthrough.
class SlimerDamageHelper : Actor
{
	void A_SlimerDamageHelper()
	{
		A_Warp(AAPTR_MASTER, 0, 0, 0, 0, WARPF_NOCHECKPOSITION|WARPF_COPYINTERPOLATION);
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other.bMissile) return true;
		return false;
	}
	
	Default
	{
		Radius 32;
		Height 64;
		Health 1;
        BloodColor "ff ff 4f";
		
		+SOLID;
		+SHOOTABLE;
	}

	States
	{
	Spawn:
		TNT1 A 1 A_SlimerDamageHelper();
		loop;
		
	Death:
		TNT1 A 1 A_KillMaster;
		stop;
	}
}

// this is the actual slimer actor.
class Slimer : DukeMonster
{
	bool isReversed;
	bool wasReversed;
	int lastReverse;
	int eatingTimer;
	Actor eatingActor;
	Actor corpseTarget;
	Actor hitbox;
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	
		isReversed = false;
		wasReversed = false;
		lastReverse = 0;
		eatingTimer = 0;
		eatingActor = null;
		corpseTarget = null;
		
		hitbox = Spawn('SlimerDamageHelper', pos);
		hitbox.master = self;
	}

	bool A_EatCorpse()
	{
		// return true to block further processing in A_MyChase.
		
		// check for corpses being around.
		// don't do it while walking on the ceiling.
		if (wasReversed) return false;
		
		if (!eatingActor) // not eating. check for corpses around (64 map units)
		{
			// check corpses 64 pixels around. chase them.
			if (!corpseTarget && !random(0,8))
			{
				BlockThingsIterator bit = BlockThingsIterator.Create(self, 64);
				while (bit.Next())
				{
					Actor mo = bit.thing;
					if (mo.health > 0 || !mo.bCorpse) continue;
					// don't eat tagged or special actors.
					if (mo.Special != 0 || mo.TID != 0) continue;
					// doublecheck the distance.
					vector3 dst = mo.pos-pos;
					if (abs(dst.x) > 64 || abs(dst.y) > 64) continue;
					// set corpse target.
					corpseTarget = mo;
					break;
				}
			}
			
			// check corpses in direct proximity.
			if (true/*!random(0,1)*/)
			{
				BlockThingsIterator bit = BlockThingsIterator.Create(self, 8);
				while (bit.Next())
				{
					Actor mo = bit.thing;
					if (mo.health > 0 || !mo.bCorpse) continue;
					// don't eat tagged or special actors.
					if (mo.Special != 0 || mo.TID != 0) continue;
					// doublecheck the distance.
					vector3 dst = mo.pos-pos;
					if (abs(dst.x) > 8 || abs(dst.y) > 8) continue;
					// start the animation!
					eatingActor = mo;
					eatingTimer = 0;
					//A_Log("started eating");
					A_PlaySound("slimer/melee");
					break;
				}
			}
			
			if (!eatingActor) return false;
		}

		eatingTimer++;
		if (eatingTimer > 17)
		{
			eatingActor.Destroy();
			eatingActor = null;
			eatingTimer = 0;
			//A_Log("finished eating");
			return false;
		}
		
		A_SetScale(0.8+sin(level.time*8)/8, 1.7+(float(level.time%5)/40)*sin(float(eatingTimer)*21)*2);
		SetState(ResolveState("EatCorpse"));
		
		return true;
	}

	void A_MyChase()
	{
		// todo call normal chase, but also check for corpses nearby.
		// also, do that funny animation that protozoid has.
		// randomly initiate up/down switch.
		
		if (A_EatCorpse()) return;
		
		if (isReversed == wasReversed && level.time-lastReverse > 35*2 && // don't switch surfaces too often
			!corpseTarget && // don't try to go to the ceiling if we have a corpse target
		    (wasReversed || !target || Distance2D(target) > 64)) // don't go to the ceiling if we are close to the target, and even leap back down
		{
			if (random(0,256)<6)
			{
				isReversed = !isReversed;
				bNoClip = true;
				bNoGravity = true;
				A_SetScale(0.35, 0.5);
			}
		}
		
		// if we are reversed and ceiling height changes, fall down.
		// if we are reversed and close to our target, fall down as well.
		if (isReversed && wasReversed)
		{
			if (abs(ceilingz-pos.z) > Default.MaxStepHeight ||
			    (target && Distance2D(target) <= 64))
			{
				isReversed = false;
				bNoClip = true;
				bNoGravity = true;
				A_SetScale(0.35, 0.8);
			}
			else
			{
				vector3 newpos = pos;
				newpos.z = ceilingz;
				SetOrigin(newpos, true);
			}
		}
		
		if (isReversed != wasReversed)
		{
			if (wasReversed) // move down
			{
				//
				if (floorz < pos.z)
				{
					vector3 newpos = pos;
					newpos.z -= 10;
					SetOrigin(newpos, true);
					SetState(ResolveState("Switch"));
					return;
				}
				else
				{
					bNoClip = false;
					bNoGravity = false;
					lastReverse = level.time;
					wasReversed = isReversed;
				}
			}
			else // move up
			{
				//
				if (ceilingz > pos.z)
				{
					vector3 newpos = pos;
					newpos.z += 10;
					SetOrigin(newpos, true);
					SetState(ResolveState("Switch"));
					return;
				}
				else
				{
					bNoClip = false;
					bNoGravity = true;
					lastReverse = level.time;
					wasReversed = isReversed;
				}
			}
		}
		
		A_SetScale(0.7+sin(level.time*16)/8, 0.4+cos(level.time*16)/32);
		SetState(wasReversed?ResolveState("ReversedSee"):ResolveState("See"));

		// actual chasing here. this function may redirect to another state. probably.
		if (corpseTarget) // chase corpse.
		{
			if (Distance3D(corpseTarget) <= speed)
			{
				SetOrigin(corpseTarget.pos, true);
			}
			else
			{
				vector3 dircorpse = (corpseTarget.pos-pos).Unit();
				SetOrigin(pos+dircorpse*speed, true);
			}
		}
		else
		{
			A_Chase();
		}
	}

	Actor liveTarget;
	vector3 liveTargetPos;
	double liveTargetAngle;
	double liveTargetPitch;
	void A_MyMelee()
	{
		if (!target)
		{
			SetState(ResolveState("Spawn"));
			return;
		}
		
		A_SetScale(0.6+sin(level.time*8)/8, 1.4+float(level.time%5)/40+cos(level.time*16)/32);
		//
		
		// block player's movement.
		if (!liveTarget)
		{
			liveTargetPos = target.pos;
			liveTargetAngle = target.angle;
			liveTargetPitch = target.pitch;
			liveTarget = target;
		}
		
		/*target.SetOrigin(liveTargetPos, false);
		target.angle = liveTargetAngle;
		target.pitch = liveTargetPitch;*/
		
		if (PlayerPawn(target))
		{
			//A_Log("attacking the player!");
			if (!target.FindInventory("SlimerAttackHelper"))
				target.GiveInventoryType("SlimerAttackHelper");
		}
		
		SetOrigin(liveTarget.pos, true);
		
		// do damage, approximately 5-11 dmg
		if (level.time%24==0)
		{
			A_PlaySound("slimer/melee");
			target.DamageMobj(self, self, random(5,11), 'None');
		}
	}
	
	void A_MyDeath()
	{
		A_Scream();
	
		// clean up facehugger helper.
		// use liveTarget pointer, as target apparently gets cleared.
		if (PlayerPawn(liveTarget))
		{
			Inventory sah = liveTarget.FindInventory("SlimerAttackHelper");
			if (sah)
			{
				liveTarget.RemoveInventory(sah);
				sah.Destroy();
			}
		}
		
		// clean up damage helper
		if (hitbox) hitbox.Destroy();
		
		// spawn random gibs
        A_SpawnItemEx("DNBloodPoolAcid", 0, 0, 0, 0, 0, 0, 0, 0, 128); // 128 is the failchance
		A_ThrowGibs("DNGreenGibs", wasReversed);
	}

	Default
	{
		Monster;
		Radius 0;
		Height 0;
		Health 1;
		Speed 2;
        
        DamageFactor "ShrinkRay", 0;
        DamageFactor "Slime", 0;
		
		+NOBLOCKMAP;
		+LOOKALLAROUND;
        +FLOORCLIP;
		
		Scale 0.7;
		
		Obituary "%o got absorbed by a protozoid slimer.";
		
		SeeSound "slimer/see";
		DeathSound "slimer/death";
		ActiveSound "slimer/roam";
	}

	States
	{
	Spawn:
		SLIM B 1 A_Look;
		loop;
		
	See:
		SLIM B 1;
		TNT1 A 0 A_MyChase;
		loop;
		
	ReversedSee:
		SLIM A 1;
		TNT1 A 0 A_MyChase;
		loop;

	Switch:
		SLIM D 1;
		TNT1 A 0 A_MyChase;
		loop;
		
	EatCorpse:
		SLIM E 1;
		TNT1 A 0 A_MyChase;
		loop;
		
	Pain:
	Death:
	XDeath:
		TNT1 A 0 A_MyDeath;
		stop;
		
	Melee:
		SLIM E 1;
		TNT1 A 0 A_MyMelee;
		loop;
	}
}