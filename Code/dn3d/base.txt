class DukeShadowSprite : Actor
{
    Default
    {
        Radius 0;
        Height 0;
    
        +NOINTERACTION;
        
        RenderStyle "Stencil";
        StencilColor "00 00 00";
    }
    
    override void Tick()
    {
        if (!master)
        {
            // die
            Destroy();
            return;
        }
        
        if (!master.bFloorClip)
        {
            vector3 offsets = (0,0,0);
            // note: this is a hack. gross hack. it works, except portals. in portals the shadow will still be random.
            Actor consoleCamera = (consoleplayer>=0) ? players[consoleplayer].camera : null;
            if (consoleCamera)
            {
                vector3 awayFromCamera = (pos-consoleCamera.pos).Unit()/8;
                offsets = awayFromCamera;
            }
            
            A_Warp(AAPTR_MASTER, offsets.x, offsets.y, offsets.z, 0, WARPF_ABSOLUTEOFFSET|WARPF_NOCHECKPOSITION|WARPF_TOFLOOR|WARPF_WARPINTERPOLATION|WARPF_COPYVELOCITY);
            
            sprite = master.sprite;
            frame = master.frame;
            A_SetScale(master.scale.x, master.scale.y/16);
            alpha = master.alpha/2;
            angle = master.angle;
            A_SetSize(master.radius, 0, false);
        }
        else
        {
            alpha = 0;
        }
            
        Super.Tick();
        
    }
    
    States
    {
    Spawn:
        TNT1 A 1;
        loop;
    }
}

class DukeMonster : Actor
{
    void A_ThrowGibs(class<Actor> cls = "DNGibs", bool down = false)
    {
        int gibscount = random(8, 16);
        for (int i = 0; i < gibscount; i++)
        {
            //
            Actor gibs = Spawn(cls, pos);
            gibs.vel = (frandom(-8,8), frandom(-8,8), frandom(0,down?-1:16));
        }
    }
    
    override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        
        Actor shadowSprite = Spawn("DukeShadowSprite", pos);
        shadowSprite.alpha = 0; // for the first tick only
        shadowSprite.master = self;
    }
    
    bool CheckShrunk()
    {
        return (!!FindInventory("Shrunk"));
    }
    
    double GetGroundHeight()
    {
        double _floorz = GetZAt();
        bool ok; Actor pOnmobj;
        [ok, pOnmobj] = TestMobjZ(true);
        if (!pOnmobj) return _floorz;
        double _actorz = pOnmobj.pos.z+pOnmobj.height;
        return max(_floorz, _actorz);
    }
    
    bool CheckOnGround()
    {
        return (abs(GetGroundHeight()-pos.z) < 1);
    }
    
    bool CheckDirectLOF(Actor mo)
    {
        Actor oldtracer = tracer;
        tracer = mo;
        bool hasLOF = !!A_CheckLOF("Spawn", 0, Distance3D(mo)+8, 0, 0, 0, 0, 0, AAPTR_TRACER);
        tracer = oldtracer;
        return hasLOF;
    }
    
    Default
    {
        +NOINFIGHTING;
    }
}

class CacoWithShadow : Cacodemon replaces Cacodemon
{
    States
    {
    Spawn:
        TNT1 A 0 A_Jump(256, "SpawnReal");
        TNT1 A 0 A_SpawnItemEx("DukeShadowSprite", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER);
    SpawnReal:
        goto Super::Spawn;
    }
}

class JumpyMonster : DukeMonster
{
    enum EJumpFlags
    {
        JF_FORWARD = (1<<0),
        JF_UP = (1<<1),
        
        JF_ALL = JF_FORWARD|JF_UP
    }

    int oldLeap;
    
    override void PostBeginPlay()
    {
        Super.PostBeginPlay();
        
        oldLeap = false;
    }

    void A_Leap()
    {
        // if grounded, go to see.
        if (CheckOnGround())
        {
            if (!oldLeap)
            {
                A_FaceTarget();
                double vertical = 12;
                if (target.pos.z-pos.z > 64 && ceilingz-pos.z > 128) vertical = 18;
                vector3 newdir = (cos(angle)*12, sin(angle)*12, vertical);
                vel += newdir;
                oldLeap = frame;
            }
            else
            {
                SetState(ResolveState("See"));
                return;
            }
        }
        else if (vel.z > 0)
        {
            vector3 newdir = (cos(angle)*2, sin(angle)*2, 0);
            vel += newdir;
            frame = oldLeap+1;
        }
        else if (vel.z < 0)
        {
            frame = oldLeap+2;
        }
    }
    
    virtual double GetJumpDistance()
    {
        double dst = 480;
        if (ceilingz-pos.z > 128) dst *= 2;
        return dst;
    }

    bool CheckPitBeforeTarget()
    {
        if (!CheckSight(target)) return false;
        
        int step = int(radius/2);
        vector3 checkdirection = (target.pos-pos).Unit()*step;
        int steps = min(Distance2D(target), GetJumpDistance())/step;
        double curz = pos.z;
        SetXYZ((pos.x, pos.y, pos.z+64));
        for (int i = 0; i < steps; i++)
        {
            double zat = GetZAt(pos.x+checkdirection.x*i, pos.y+checkdirection.y*i, 0, GZF_ABSOLUTEPOS|GZF_ABSOLUTEANG);
            //A_LogFloat(zat);
            if (curz-zat > MaxStepHeight*2 || zat-curz > MaxStepHeight)
            {
                SetXYZ((pos.x, pos.y, curz));
                return true;
            }
        }
        
        SetXYZ((pos.x, pos.y, curz));
        return false;
    }
    
    bool TryLeap(state leapstate, EJumpFlags flags)
    {
        if (!target) return false;
        //
        if (CheckOnGround() && // if we are standing
            !random(0, 16) && // and we don't do this all the time
            (((flags & JF_UP) && (abs(target.pos.z-pos.z) > Default.MaxStepHeight)) || // and target has more height difference than maxstepheight
             ((flags & JF_FORWARD) && CheckPitBeforeTarget())) && // and there's a deep pit in front of us
            Distance2D(target) < GetJumpDistance()) // and target is within max jump radius
        {
            oldLeap = 0;
            SetState(ResolveState("Leap"));
            return true;
        }
        
        return false;
    }
}